import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:tcs_demo/api/EndPoints.dart';import 'package:tcs_demo/extensions/snackBarExtension.dart';import 'package:tcs_demo/pages/DashboardPage.dart';import 'package:tcs_demo/pages/MPinPage.dart';import 'package:tcs_demo/pages/OtpPage.dart';import 'package:tcs_demo/requestModels/EmployeeDetailRequest.dart';import 'package:tcs_demo/responseModels/BasicResponse.dart';import 'package:tcs_demo/responseModels/EmployeeDetailResponse.dart';import 'package:tcs_demo/utils/PreferenceManager.dart';import '../api/ApiProvider.dart';import '../api/ApiResult.dart';import '../api/api_service.dart';import '../requestModels/VersionCheckRequest.dart';import '../responseModels/VersionCheckResponse.dart';class AuthViewModel extends GetxController {  final apiProvider = Get.put(ApiProvider());  final ApiService _apiService = ApiService();  final preferenceManager = Get.put(PreferenceManager());  final employeeDetailResponseState =      const ApiResult<EmployeeDetailResponse>.init().obs;  final verifyDetailResponseState = const ApiResult<BasicResponse>.init().obs;  final versioncheckresponsestate = const ApiResult<VersionCheckResponse>.init().obs;  final verifyMPinState = const ApiResult<BasicResponse>.init().obs;  Future<void> fetchEmployeeDetails(String loginId,      {bool? forceMPin}) async {    try {      if (loginId.isEmpty) {        throw ('Enter Employee ID');      }      employeeDetailResponseState.value = const ApiResult.loading();      final response = await apiProvider.post(EndPoints.employeeCheckApi,          EmployeeDetailRequest(loginId: loginId).toJson());      final responseData = EmployeeDetailResponse.fromJson(response.body);      if (responseData.status == true) {        employeeDetailResponseState.value = ApiResult.success(responseData);        if (forceMPin != true &&            responseData.employeeDetails?.mpin?.length == 4) {          Get.bottomSheet(              Column(                children: [                  Container(                    height: 425,                    //color: Colors.red,                    child: OtpPage(showMPin: false),                  )                ],              ),              isScrollControlled: false,              isDismissible: false);        } else {          Get.to(() => OtpPage(              showMPin: forceMPin ??                  (responseData.employeeDetails?.mpin?.length ?? 0) < 4));        }      } else {        employeeDetailResponseState.value =            ApiResult.error(responseData.remarks ?? "Something Went Wrong");        Get.showSnackBar(            message: responseData.remarks ?? "Something Went Wrong",            backgroundColor: Colors.red        );      }    } catch (e) {      Get.showSnackBar(message: '$e', backgroundColor: Colors.red);      employeeDetailResponseState.value = ApiResult.error('$e');    }  }  Future<void> verifyOTP(String otp, String mPin) async {    try {      print('verifyOTP() called with otp: $otp, mPin: $mPin');      final employeeData = employeeDetailResponseState.value          .whenOrNull(success: (data) => data as EmployeeDetailResponse?)          ?.employeeDetails;      verifyDetailResponseState.value = const ApiResult.loading();      final request = VerifyOtpRequest(          loginId: employeeData?.loginId ?? '',              sentOtp: otp,              mpin: mPin)          .toJson();      print('OTP verification request: $request');      PreferenceManager().setValue(          PreferenceManager().loginId, employeeData?.loginId ?? "");      PreferenceManager().setValue(          PreferenceManager().employeeName, employeeData?.employeeName ?? "");      final response = await apiProvider.post(EndPoints.validateOtp, request);      print('OTP verification response: ${response.body}');      final responseData = BasicResponse.fromJson(response.body);      if (responseData.status == true) {        print('OTP verified successfully.');        Get.offAll(() => const MPinPage());        verifyDetailResponseState.value = ApiResult.success(responseData);      } else {        print('OTP verification failed: ${responseData.remarks}');        verifyDetailResponseState.value =            ApiResult.error(responseData.remarks ?? "Unable to Verify OTP");      }    } catch (e) {      print('Exception in verifyOTP: $e');      verifyDetailResponseState.value = ApiResult.error('$e');    }  }  Future<void> verifyMPin(String mPin) async {    try {      if (mPin.length < 4) {        throw ("Please Provide MPIN");      }      final employeeData = employeeDetailResponseState.value          .whenOrNull(success: (data) => data as EmployeeDetailResponse?)          ?.employeeDetails;      verifyMPinState.value = const ApiResult.loading();      final loginId =          await preferenceManager.getValue(preferenceManager.loginId);      final request = MPinRequest(          loginId: employeeData?.loginId ?? loginId ?? '',              mpin: mPin)          .toJson();      final response = await apiProvider.post(EndPoints.verifyUser, request);      final responseData = BasicResponse.fromJson(response.body);      if (responseData.status == true) {        verifyMPinState.value = ApiResult.success(responseData);        employeeDetailResponseState.value =            ApiResult.success(EmployeeDetailResponse.fromJson(response.body));        Get.to(() => const DashboardPage());      } else {        verifyMPinState.value =            ApiResult.error(responseData.remarks ?? "Unable to Verify MPIN");      }    } catch (e) {      verifyMPinState.value = ApiResult.error('$e');    }  }  Future<VersionCheckResponse?> checkVersion(String appversion) async {    try {      versioncheckresponsestate.value = const ApiResult.loading();      final request = VersionCheckRequest(version: appversion);      final response = await apiProvider.post(EndPoints.versioncheckapi, request.toJson());      // final responseData = versioncheckresponsestate.fromJson(response.body);      final responseData = VersionCheckResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "Unable to get trade license info";      }      versioncheckresponsestate.value = ApiResult.success(responseData);      return responseData; //    } catch (e) {      versioncheckresponsestate.value = const ApiResult.error("Unable to fetch trade license details");      Get.showSnackbar(GetSnackBar(        message: 'Failed: $e',        duration: const Duration(seconds: 2),      ));      return null; //    }  }}