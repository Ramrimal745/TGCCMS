import 'dart:convert';import 'dart:io';import 'package:crypto/crypto.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:tcs_demo/api/ApiProvider.dart';import 'package:tcs_demo/api/ApiResult.dart';import 'package:tcs_demo/api/EndPoints.dart';import 'package:tcs_demo/extensions/snackBarExtension.dart';import 'package:tcs_demo/requestModels/ChallanRequest.dart';import 'package:tcs_demo/requestModels/TradelicenseRequest.dart';import 'package:tcs_demo/requestModels/TransactionRequest.dart';import 'package:tcs_demo/responseModels/BasicResponse.dart';import 'package:tcs_demo/responseModels/ChallanResponse.dart';import 'package:tcs_demo/responseModels/TradeLicenseResponse.dart';import 'package:tcs_demo/responseModels/TransactionResponse.dart';import 'package:tcs_demo/viewModels/TradeLicenseViewModel.dart';import 'package:weipl_checkout_flutter/weipl_checkout_flutter.dart';class ChallanViewModel extends GetxController {  final apiProvider = Get.put(ApiProvider());  final tradelicenseresponsestate = const ApiResult<TradeLicenseResponse>.init().obs;  final transactionresponsestate = const ApiResult<TransactionResponse>.init().obs;  final vehicalresponsestate = const ApiResult<VehicalResponse>.init().obs;  final wingsResponseState = const ApiResult<WingsResponse>.init().obs;  final componentResponseState = const ApiResult<ComponentResponse>.init().obs;  final metrixResponseState = const ApiResult<MetrixResponse>.init().obs;  final challanResponseState = const ApiResult<ChallanResponse>.init().obs;  final paymentRequestDetailState = const ApiResult<PaymentDetailResponse>.init().obs;  final paymentCompletedResponseState = const ApiResult<BasicResponse>.init().obs; // final merchantId = "T688148"; // TEST  final merchantId = "L1067158";// Live  final consumerId = "c964634"; // final encryptionKey = "5316792357LHKNYF";// Test  final encryptionKey = "6736629439RCKDCH";//Live  Future<void> fetchWingsMaster() async {    try {      wingsResponseState.value = const ApiResult.loading();      final response = await apiProvider.post(EndPoints.getWingsMaster, {});      final responseData = WingsResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "Unable to Get Wings ";      }      wingsResponseState.value = ApiResult.success(responseData);    } catch (e) {      Get.showSnackBar(message: 'Failed $e');      wingsResponseState.value =          const ApiResult.error("Unable to Get Employee Details");    }  }  Future<void> fetchComponentMaster(ComponentRequest request) async {    try {      componentResponseState.value = const ApiResult.loading();      final response = await apiProvider.post(          EndPoints.getComponentMaster, request.toJson());      final responseData = ComponentResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "Unable to Get Wings";      }      componentResponseState.value = ApiResult.success(responseData);    } catch (e) {      Get.showSnackBar(message: 'Failed $e');      componentResponseState.value =          const ApiResult.error("Unable to Get Employee Details");    }  }  Future<void> fetchMetrixMaster(MetrixRequest request) async {    try {      metrixResponseState.value = const ApiResult.loading();      final response =          await apiProvider.post(EndPoints.getMetrixMaster, request.toJson());      final responseData = MetrixResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "Unable to Get Wings";      }      metrixResponseState.value = ApiResult.success(responseData);    } catch (e) {      Get.showSnackBar(message: 'Failed $e');      metrixResponseState.value =          const ApiResult.error("Unable to Get Employee Details");    }  }  Future<String?> getLocalIpAddress() async {    for (var interface in await NetworkInterface.list()) {      for (var address in interface.addresses) {        if (address.type == InternetAddressType.IPv4) {          return address.address; // Returns local IP (e.g., 192.168.1.10)        }      }    }    return null;  }// submit challana  Future<bool> generateChallan(ChallanRequest request) async {    try {      challanResponseState.value = const ApiResult.loading();      final response = await apiProvider.post(EndPoints.submitChallan, request.toJson());      print("Raw Response: ${response.bodyString}");      print("Response status code: ${response.statusCode}");      final responseData = ChallanResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "";      } else {        Get.showSnackBar(message: responseData.remarks ?? "");      }      challanResponseState.value = ApiResult.success(responseData);      return true;    } catch (e) {      print("Exception during challan generation: $e");      Get.showSnackBar(message: 'Failed $e');      challanResponseState.value = ApiResult.error('Failed $e');      return false;    }  }  Future<bool> generateChallanTemp(ChallanRequest request) async {    try {      challanResponseState.value = const ApiResult.loading();      final response = await apiProvider.post(EndPoints.submitChallantemp, request.toJson());      print("Raw Response: ${response.bodyString}");      print("Response status code: ${response.statusCode}");      final responseData = ChallanResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "";      } else {        Get.showSnackBar(message: responseData.remarks ?? "");      }      challanResponseState.value = ApiResult.success(responseData);      return true;    } catch (e) {      print("Exception during challan generation: $e");      Get.showSnackBar(message: 'Failed $e');      challanResponseState.value = ApiResult.error('Failed $e');      return false;    }  }  Future<bool> generateSubmitTempChallan(ChallanTempRequest request) async {    try {      challanResponseState.value = const ApiResult.loading();      final response =      await apiProvider.post(EndPoints.submitchallanfromtemp, request.toJson());      final responseData = ChallanResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "";      } else {        Get.showSnackBar(message: responseData.remarks ?? "");      }      challanResponseState.value = ApiResult.success(responseData);      return true;    } catch (e) {      Get.showSnackBar(message: 'Failed $e');      challanResponseState.value = ApiResult.error('Failed $e');      return false;    }  }  Future<Map<String, dynamic>?> generatePaymentRequest(      ChallanPaymentRequest paymentRequest) async {    try {      paymentRequestDetailState.value = const ApiResult.loading();      final response = await apiProvider.post(          EndPoints.paymentRequest, paymentRequest.toJson());      final responseData = PaymentDetailResponse.fromJson(response.body);      if (responseData.status == true) {        paymentRequestDetailState.value = ApiResult.success(responseData);        final token = generateSha1Key(responseData);        String deviceID = ""; // initialize variable        if (Platform.isAndroid) {          deviceID = "AndroidSH2";        } else if (Platform.isIOS) {          deviceID = "iOSSH2";        }        var reqJson = {          "features": {            "enableExpressPay": true,            "enableInstrumentDeRegistration": true,            "enableAbortResponse": true,            "enableMerTxnDetails": true          },          "consumerData": {            "deviceId": deviceID,            "token": token,            "paymentMode": "all",            "merchantId": merchantId,            "currency": "INR",            "consumerId": consumerId,            "txnId": responseData.transactionNumber ?? "",            "items": [              {                "itemId": "first",                "amount": responseData.challanAmount.toString(),              //  "amount": "1",                "comAmt": "0"              }            ],            "customStyle": {              "PRIMARY_COLOR_CODE": "#45beaa",              "SECONDARY_COLOR_CODE": "#ffffff",              "BUTTON_COLOR_CODE_1": "#2d8c8c",              "BUTTON_COLOR_CODE_2": "#ffffff"            }          }        };        return reqJson;      } else {        paymentRequestDetailState.value = ApiResult.error(responseData?.remarks ?? "");        Get.showSnackBar(            message: responseData.remarks ?? "", backgroundColor: Colors.red);      }    } catch (e) {      paymentRequestDetailState.value = ApiResult.error(e.toString());      Get.showSnackBar(message: e.toString(), backgroundColor: Colors.red);    }  }  String generateSha1Key(PaymentDetailResponse response) {    StringBuffer mBuilder = StringBuffer();    mBuilder.write(merchantId);    mBuilder.write("|");    mBuilder.write(response.transactionNumber);    mBuilder.write("|");    mBuilder.write(response.challanAmount.toString());  //  mBuilder.write("1");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write(consumerId);    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write("|");    mBuilder.write(encryptionKey);    var bytes =        utf8.encode(mBuilder.toString()); // Convert string to UTF-8 bytes    var digest = sha512.convert(bytes); // Compute SHA-512 hash    return digest.toString();  }  Future<void> insertPayment(EmployeePayment request) async {    try {      paymentCompletedResponseState.value = const ApiResult.loading();      final response =      await apiProvider.post(EndPoints.insertPaymentDetails, request.toJson());      final responseData = BasicResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "Unable to Insert Payment";      }      paymentCompletedResponseState.value = ApiResult.success(responseData);    } catch (e) {      Get.showSnackBar(message: 'Failed $e');      paymentCompletedResponseState.value =      const ApiResult.error("Unable to Get Employee Details");    }  }  Future<TradeLicenseResponse?> fetchTradeLicense(String licenseNumber) async {    try {      tradelicenseresponsestate.value = const ApiResult.loading();      final request = TradelicenseRequest(tradeLicenseNumber: licenseNumber);      final response = await apiProvider.post(EndPoints.tradelicence, request.toJson());      final responseData = TradeLicenseResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "Unable to get trade license info";      }      tradelicenseresponsestate.value = ApiResult.success(responseData);      return responseData; // ✅ RETURNING THE RESULT    } catch (e) {      tradelicenseresponsestate.value = const ApiResult.error("Unable to fetch trade license details");      Get.showSnackbar(GetSnackBar(        message: 'Failed: $e',        duration: const Duration(seconds: 2),      ));      return null; //    }  }  Future<TransactionResponse?> fetchTransactiondetails(String challanaNumber) async {    try {      transactionresponsestate.value = const ApiResult.loading();      final request = TransactionRequest(challanNumber: challanaNumber);      final response = await apiProvider.post(EndPoints.challantransactions, request.toJson());      final responseData = TransactionResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.remarks ?? "Unable to get trade license info";      }      transactionresponsestate.value = ApiResult.success(responseData);      return responseData; //    } catch (e) {      transactionresponsestate.value = const ApiResult.error("Unable to fetch trade license details");      Get.showSnackbar(GetSnackBar(        message: 'Failed: $e',        duration: const Duration(seconds: 2),      ));      return null; //    }  }  Future<VehicalResponse?> fetchVehicaldetails(String vehicalnumber) async {    try {      vehicalresponsestate.value = const ApiResult.loading();      final request = VehicalRequest(vehicalnumber: vehicalnumber);      final response = await apiProvider.post(EndPoints.getvehicleData, request.toJson());      // ✅ Print response type and body for debug      print("Response Type: ${response.body.runtimeType}");      print("Raw Response: ${response.body}");      if (response.body == null || response.body is! Map<String, dynamic>) {        throw "Invalid response format";      }      final responseData = VehicalResponse.fromJson(response.body);      if (responseData.status != true) {        throw responseData.result ?? "Unable to get vehicle info";      }      vehicalresponsestate.value = ApiResult.success(responseData);      return responseData;    } catch (e) {      vehicalresponsestate.value = const ApiResult.error("Unable to fetch vehicle details");      Get.showSnackbar(GetSnackBar(        message: 'Failed: $e',        duration: const Duration(seconds: 2),      ));      return null;    }  }}