import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:get/get.dart';import 'package:tcs_demo/pages/ChallanReportPage.dart';import 'package:tcs_demo/pages/GenerateChallan.dart';import 'package:tcs_demo/pages/PendingChallanPage.dart';import 'package:tcs_demo/pages/ProfilePage.dart';import 'package:tcs_demo/pages/WingDashboardPage.dart';import 'package:tcs_demo/responseModels/ChallanResponse.dart';import 'package:tcs_demo/responseModels/ReportResponse.dart';import 'package:tcs_demo/utils/PreferenceManager.dart';import 'package:tcs_demo/viewModels/AuthViewModel.dart';import 'package:tcs_demo/viewModels/ReportViewModel.dart';import '../components/BackHandler.dart';import '../responseModels/EmployeeDetailResponse.dart';class DashboardPage extends StatefulWidget {  const DashboardPage({    super.key,  });  @override  State<DashboardPage> createState() => _DashboardPageState();}class _DashboardPageState extends State<DashboardPage> {  final authViewModel = Get.put(AuthViewModel());  final preferenceManager = Get.put(PreferenceManager());  final reportViewModel = Get.put(ReportViewModel());  void fetchDashboardCount() async {    final loginId =        await preferenceManager.getValue(preferenceManager.loginId);    reportViewModel.fetchDashboardCount(loginId);  }  void showExitConfirmationDialog() {    showGeneralDialog(      context: context,      barrierDismissible: true,      barrierLabel: "Exit",      barrierColor: Colors.black54,      transitionDuration: const Duration(milliseconds: 300),      pageBuilder: (_, __, ___) {        return Center(          child: Container(            margin: const EdgeInsets.symmetric(horizontal: 24),            padding: const EdgeInsets.all(20),            decoration: BoxDecoration(              color: Colors.white,              borderRadius: BorderRadius.circular(20),            ),            child: Material(              color: Colors.transparent,              child: Column(                mainAxisSize: MainAxisSize.min,                children: [                  const Icon(Icons.exit_to_app, color: Colors.red, size: 48),                  const SizedBox(height: 12),                  const Text(                    'TGCCMS',                    style: TextStyle(                      fontSize: 20,                      fontWeight: FontWeight.bold,                      color: Colors.black87,                    ),                  ),                  const SizedBox(height: 8),                  const Text(                    'Are you sure you want to exit?',                    textAlign: TextAlign.center,                    style: TextStyle(color: Colors.black54, fontSize: 16),                  ),                  const SizedBox(height: 20),                  Row(                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,                    children: [                      ElevatedButton.icon(                        style: ElevatedButton.styleFrom(                          backgroundColor: Colors.grey[300],                          foregroundColor: Colors.black87,                        ),                        icon: const Icon(Icons.cancel),                        label: const Text('Cancel'),                        onPressed: () => Navigator.of(context).pop(),                      ),                      ElevatedButton.icon(                        style: ElevatedButton.styleFrom(                          backgroundColor: Colors.redAccent,                        ),                        icon: const Icon(Icons.exit_to_app),                        label: const Text('Exit'),                        onPressed: () {                          Navigator.of(context).pop();                          SystemNavigator.pop();                        },                      ),                    ],                  ),                ],              ),            ),          ),        );      },      transitionBuilder: (_, anim, __, child) {        return SlideTransition(          position: Tween<Offset>(            begin: const Offset(0, 1),            end: Offset.zero,          ).animate(anim),          child: FadeTransition(            opacity: anim,            child: ScaleTransition(              scale: Tween<double>(begin: 0.9, end: 1).animate(anim),              child: child,            ),          ),        );      },    );  }  @override  void initState() {    super.initState();    fetchDashboardCount();  }  @override  Widget build(BuildContext context) {    return Obx(() {      final employeeData = authViewModel.employeeDetailResponseState.value          .whenOrNull(success: (data) => data as EmployeeDetailResponse?)          ?.employeeDetails;      final isLoading = (authViewModel.verifyMPinState.value              .whenOrNull(loading: () => true) ??          false);      final dashBoardCountState = reportViewModel.dashboardCountState.value          .whenOrNull(success: (data) => data as DashBoardCountResponse?);      return SafeArea(        top: true,        child: isLoading            ? const Align(                alignment: Alignment.center,                child: CircularProgressIndicator(color: Colors.blueAccent))            : Scaffold(                body:                Stack(                  children: [                    BackHandler(callBack: () => SystemNavigator.pop()),                    Container(                      decoration: const BoxDecoration(                        image: DecorationImage(                          image: AssetImage('assets/images/ccms_bg.png'),                          fit: BoxFit.fill,                        ),                      ),                    ),                    SingleChildScrollView(                      child: Column(                        children: [                          Padding(                            padding: const EdgeInsets.only(                                top: 140, left: 20, right: 20),                            child: Container(                              decoration: BoxDecoration(                                color: Colors.white,                                borderRadius: BorderRadius.all(Radius.circular(20)), // More rounded                                boxShadow: [                                  BoxShadow(                                    color: Colors.black.withOpacity(0.2), // Shadow color                                    spreadRadius: 4,   // How wide the shadow spreads                                    blurRadius: 12,    // How blurry the shadow is                                    offset: const Offset(0, 6), // Shadow position (x, y)                                  ),                                ],                              ),                              width: double.infinity,                              child: Column(                                children: [                                  const SizedBox(height: 16),                                  const SizedBox(height: 8),                                  Text(                                    employeeData?.loginId ?? "",                                    style: const TextStyle(                                        fontSize: 18,                                        color: Colors.blue,                                        fontWeight: FontWeight.bold),                                  ),                                  Text(                                    employeeData?.employeeName ?? "",                                    style: const TextStyle(                                        fontSize: 14,                                        color: Colors.blue,                                        fontWeight: FontWeight.bold),                                  ),                                  Text(                                    employeeData?.designation ?? "",                                    style: const TextStyle(                                        fontSize: 14,                                        color: Colors.blue,                                        fontWeight: FontWeight.bold),                                  ),                                  const SizedBox(height: 16),                                ],                              ),                            ),                          ),                          const SizedBox(height: 0),                          InkWell(                            child:                            Row(                              mainAxisAlignment: MainAxisAlignment.end,                              children: [                                TextButton.icon(                                  onPressed: () {                                    fetchDashboardCount();                                  },                                  label: const Text(                                    'Refresh',                                    style: TextStyle(                                      color: Colors.blue,                                      fontWeight: FontWeight.bold,                                      fontSize: 14,                                    ),                                  ),                                  icon: const Icon(Icons.refresh,size: 20, color: Colors.blue),                                ),                              ],                            ),                          ),                          const SizedBox(height: 10),                          Padding(                            padding: const EdgeInsets.symmetric(horizontal: 16),                            child: Obx(() {                              final state = reportViewModel.wingWiseCountState.value;                              final dashboardCounts = state.whenOrNull(success: (data) => (data as WingDashboardResponse?)?.dashboardCounts ?? []);                              int totalChallans = 0;                              int paidChallans = 0;                              int pendingChallans = 0;                              int totalAmount = 0;                              int receivedAmount = 0;                              int pendingAmount = 0;                              for (var item in dashboardCounts ?? []) {                                totalChallans += int.tryParse(item.totalChallans ?? '0') ?? 0;                                paidChallans += int.tryParse(item.paidChallans ?? '0') ?? 0;                                pendingChallans += int.tryParse(item.pendingChallans ?? '0') ?? 0;                                totalAmount += int.tryParse(item.totalAmount ?? '0') ?? 0;                                receivedAmount += int.tryParse(item.receivedAmount ?? '0') ?? 0;                                pendingAmount += int.tryParse(item.pendingAmount ?? '0') ?? 0;                              }                              return SingleChildScrollView(                                scrollDirection: Axis.horizontal,                                child: Row(                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,                                  children: [                                    _buildStatusCard(                                      dashBoardCountState?.totalChallans ?? "",                                      'Total\nChallans',                                      Colors.green,                                      dashBoardCountState?.totalAmount ?? '',                                      onTap: () {                                        Get.to(() => WingDashboardPage(requestFlag: '1'));                                      },                                    ),                                    _buildStatusCard(                                      dashBoardCountState?.paidChallans ?? "",                                      'Received Challans',                                      Colors.orange,                                      dashBoardCountState?.receivedAmount ?? '',                                      onTap: () {                                        Get.to(() => WingDashboardPage(requestFlag: '3'));                                      },                                    ),                                    _buildStatusCard(                                      dashBoardCountState?.pendingChallans ?? "",                                      'Pending\nAmount',                                      Colors.purple,                                      dashBoardCountState?.pendingAmount ?? '',                                      onTap: () {                                        Get.to(() => WingDashboardPage(requestFlag: '2'));                                      },                                    ),                                  ],                                ),                              );                            }),                          ),                          const SizedBox(height: 24),                          Padding(                            padding: const EdgeInsets.symmetric(horizontal: 16),                            child: Row(                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,                              children: [                                _buildActionButton(                                    Icons.receipt,                                    'Generate Challan',                                    context,                                    () => Get.to(                                        () => const GenerateChallanPage())),                                _buildActionButton(                                    Icons.bar_chart,                                    'MIS',                                    context,                                    () => Get.to(                                        () => const ChallanReportPage())),                                _buildActionButton(                                    Icons.newspaper,                                    'Pending Challan',                                    context,                                        () => Get.to(() => const PendingChallanPage())),                                _buildActionButton(                                    Icons.person,                                    'Profile',                                    context,                                    () => Get.to(() => const ProfilePage())),                              ],                            ),                          ),                        ],                      ),                    ),                    Positioned(                      top: 0,                      right: 0,                      child: SafeArea(                        child: Material(                          color: Colors.transparent,                          child: IconButton(                            icon: const Icon(Icons.exit_to_app, color: Colors.white),                            tooltip: 'Exit',                            onPressed: () => showExitConfirmationDialog(),                          ),                        ),                      ),                    ),                  ],                ),              ),      );    });  }  Widget _buildStatusCard(String values, String label, Color color, String amount, {VoidCallback? onTap}) {    return GestureDetector(      onTap: onTap,      child: SizedBox(        width: 160,        child: Card(          color: color,          child: Padding(            padding: const EdgeInsets.all(12),            child: Column(              children: [                Text(label, textAlign: TextAlign.center, style: const TextStyle(fontSize: 14, color: Colors.white, fontWeight: FontWeight.w800)),                const SizedBox(height: 8),                Text('Count : $values', style: const TextStyle(fontSize: 14, color: Colors.white, fontWeight: FontWeight.bold)),                const SizedBox(height: 8),                Text('Amount : $amount', style: const TextStyle(fontSize: 12, color: Colors.white, fontWeight: FontWeight.bold)),              ],            ),          ),        ),      ),    );  }  Widget _buildActionButton(      IconData icon, String label, BuildContext context, VoidCallback onClick) {    return Expanded(      child: InkWell(          onTap: onClick,          child: Column(            children: [              CircleAvatar(                radius: 30,                backgroundColor: Colors.grey[200],                child: Icon(icon, size: 30, color: Colors.blue),              ),              const SizedBox(height: 8),              Text(                label,                textAlign: TextAlign.center,                style:                    const TextStyle(fontSize: 14, fontWeight: FontWeight.w500),              ),            ],          )),    );  }}