import 'dart:convert';import 'dart:io';import 'dart:ui' as ui;import 'dart:io';import 'dart:typed_data';import 'package:image/image.dart' as img;import 'package:image_picker/image_picker.dart';import 'package:geolocator/geolocator.dart';import 'package:path_provider/path_provider.dart';import 'package:path/path.dart' as path;import 'package:flutter/material.dart';import 'package:flutter_image_compress/flutter_image_compress.dart';import 'package:get/get.dart';import 'package:image_picker/image_picker.dart';import 'package:permission_handler/permission_handler.dart';import 'package:tcs_demo/components/ChallanDisplayDialog.dart';import 'package:tcs_demo/components/CustomDropDown.dart';import 'package:tcs_demo/components/CustomTextField.dart';import 'package:tcs_demo/extensions/snackBarExtension.dart';import 'package:tcs_demo/requestModels/ChallanRequest.dart';import 'package:tcs_demo/responseModels/ChallanResponse.dart';import 'package:tcs_demo/responseModels/EmployeeDetailResponse.dart';import 'package:tcs_demo/utils/Dialog.dart';import 'package:tcs_demo/validators/ChallanValidator.dart';import 'package:tcs_demo/validators/ChallanValidatorsNo.dart';import 'package:tcs_demo/viewModels/AuthViewModel.dart';import 'package:tcs_demo/viewModels/ChallanViewModel.dart';import 'package:tcs_demo/viewModels/LocationViewModel.dart';import '../components/NoChallanDisplayDialog.dart';class GenerateChallanPage extends StatefulWidget {  const GenerateChallanPage({super.key});  @override  State<GenerateChallanPage> createState() => _GenerateChallanPageState();}class _GenerateChallanPageState extends State<GenerateChallanPage> {  File? _pickedImage;  String? _base64Image;  File? _secondPickedImage;  String? _secondBase64Image;  File? _thirdPickedImage;  String? _thirdBase64Image;  String flage='1';  String? _value = 'Yes';  var isFieldsReadOnly = false.obs;  bool isAmountUpdatedByUser = false;  bool hasFetchedTradeLicense = false;  bool hasFetchedVehicleDetails = false;  int calculatedPenaltyAmount = 0; // String? paymentMode;  TextEditingController offenceHolderNameController = TextEditingController();  TextEditingController mobileNumberController = TextEditingController();  TextEditingController vehicleNumberController = TextEditingController();  TextEditingController vhnoController = TextEditingController();  TextEditingController Vremarks = TextEditingController();  TextEditingController noofoffenceController = TextEditingController();  TextEditingController emailController = TextEditingController();  TextEditingController offenderAddressController = TextEditingController();  TextEditingController tradeLicenseController = TextEditingController();  Map<String, String> errors = {};  final challanViewModel = Get.put(ChallanViewModel());  final locationViewModel = Get.put(LocationViewModel());  final authViewModel = Get.put(AuthViewModel());  Map<String, dynamic>? selectedLocation;  List<WingListResponse> offenderList = [    const WingListResponse(wingId: 1, wingName: 'Individual'),    const WingListResponse(wingId: 2, wingName: 'Establishment'),  ];  //WingListResponse selectedLoginId = const WingListResponse();  WingListResponse selectedOffender = const WingListResponse();  WingListResponse selectedWing = const WingListResponse();  ComponentListResponse selectedComponent = const ComponentListResponse();  MetrixListResponse selectedMetrix = const MetrixListResponse();  final _formKey = GlobalKey<FormState>();  Uint8List? _stampedImageBytes;  UniqueKey imageKey = UniqueKey();  Future<Uint8List?> _addStampOnImageReturnBytes(      File imageFile, double latitude, double longitude) async {    // Load Original Image as ui.Image    final imageBytes = await imageFile.readAsBytes();    final codec = await ui.instantiateImageCodec(imageBytes, targetWidth: 1080);    final frame = await codec.getNextFrame();    final ui.Image originalImage = frame.image;    // Create Canvas to draw on    final recorder = ui.PictureRecorder();    final canvas = Canvas(recorder,        Rect.fromLTWH(0, 0, originalImage.width.toDouble(), originalImage.height.toDouble()));    // Draw Original Image    canvas.drawImage(originalImage, Offset.zero, Paint());    // Prepare Text Style    final textStyle = TextStyle(      color: Colors.yellow,      fontSize: 32,      fontFamily: 'Montserrat',    );    // Text to Draw    final stampText =        "Lat: ${latitude.toStringAsFixed(6)}\nLng: ${longitude.toStringAsFixed(6)}\n${DateTime.now().toString().split('.')[0]}";    final textSpan = TextSpan(      text: stampText,      style: textStyle,    );    final textPainter = TextPainter(      text: textSpan,      textAlign: TextAlign.left,      textDirection: TextDirection.ltr,    );    textPainter.layout(      minWidth: 0,      maxWidth: originalImage.width.toDouble(),    );    // Position: Bottom-Left    final double dx = 20;    final double dy = originalImage.height - textPainter.height - 20;    textPainter.paint(canvas, Offset(dx, dy));    // End Drawing & Convert to Image    final picture = recorder.endRecording();    final stampedImage = await picture.toImage(originalImage.width, originalImage.height);    final byteData = await stampedImage.toByteData(format: ui.ImageByteFormat.png);    if (byteData != null) {      // Compress to JPEG      final pngBytes = byteData.buffer.asUint8List();      final jpgBytes = await FlutterImageCompress.compressWithList(        pngBytes,        format: CompressFormat.jpeg,        quality: 90,      );      return jpgBytes;    }    return null;  }  @override  void initState() {    super.initState();    //calculatedPenaltyAmount = (selectedMetrix.penaltyAmount ?? 0).toInt();    //   noofoffenceController.addListener(() {    //     final noOfOffence = int.tryParse(noofoffenceController.text) ?? 0;    //     final baseAmount = selectedMetrix.penaltyAmount ?? 0;    //    //     setState(() {    //    //       // calculatedPenaltyAmount = baseAmount * noOfOffence;    //    //       if (noOfOffence != null && noOfOffence > 0) {    //         calculatedPenaltyAmount = (selectedMetrix.penaltyAmount ?? 0) * noOfOffence;    //       } else {    //         calculatedPenaltyAmount = (selectedMetrix.penaltyAmount?? 0).toInt(); // fallback    //       }    //    //     });    //   });    /// Set listener for No of Offence    noofoffenceController.addListener(() {      _updatePenaltyAmount();    });    init();  }  void _updatePenaltyAmount() {    if (!isAmountUpdatedByUser) return;    final baseAmount = selectedMetrix.penaltyAmount ?? 0;    if (selectedWing.wingName == "Advertisement" ||        selectedWing.wingName == "Unauthorised erection of banners/hoardings/posters") {      final offenceText = noofoffenceController.text.trim();      final count = int.tryParse(offenceText) ?? 0;      setState(() {        calculatedPenaltyAmount = count > 0 ? baseAmount * count : 0;      });    } else {      // For other wings, penalty is directly from metrix      setState(() {        calculatedPenaltyAmount = baseAmount.toInt();      });    }  }  void clearChallanForm() {    // Clear all text fields    //offenderList.clear();    offenceHolderNameController.clear();    mobileNumberController.clear();    vehicleNumberController.clear();    vhnoController.clear();    Vremarks.clear();    noofoffenceController.clear();    emailController.clear();    offenderAddressController.clear();    tradeLicenseController.clear();    // Clear image and base64    _pickedImage = null;    _base64Image = null;    _secondPickedImage = null;    _secondBase64Image = null;    _thirdPickedImage = null;    _thirdBase64Image = null;    // Reset dropdowns and selections    selectedOffender = const WingListResponse();    selectedWing = const WingListResponse();    selectedComponent = const ComponentListResponse();    selectedMetrix = const MetrixListResponse();    selectedLocation = null;    _value = 'Yes';    flage = '1';    calculatedPenaltyAmount = 0;    isAmountUpdatedByUser = false;    hasFetchedTradeLicense = false;    hasFetchedVehicleDetails = false;    isFieldsReadOnly.value = false;    // Reset Form    _formKey.currentState?.reset();    // Refresh UI    setState(() {});  }  @override  void dispose() {    noofoffenceController.dispose();    super.dispose();  }  void init() async {    final address = await locationViewModel.getCurrentLocation();    setState(() {      selectedLocation = address;      calculatedPenaltyAmount = 0;      // calculatedPenaltyAmount = selectedMetrix.penaltyAmount ?? 0;      noofoffenceController.text = "0"; // were default value ==0    });  }// compressing image  Future<File?> compressImage(File file) async {    final filePath = file.absolute.path;    final lastIndex = filePath.lastIndexOf('.');    final newPath = "${filePath.substring(0, lastIndex)}_compressed.jpg";    final result = await FlutterImageCompress.compressAndGetFile(      filePath,      newPath,      quality: 80, // 80% compression    );    return result != null ? File(result.path) : null;  }  // pick image  Future<File?> pickImage() async {    final pickedFile =        await ImagePicker().pickImage(source: ImageSource.camera);    if (pickedFile != null) {      return File(pickedFile.path);    }    return null;  }// Generic Image Picker Function  Future<void> pickAndSetImage(int imageIndex) async {    await Permission.camera.request();    await Permission.location.request();    final picker = ImagePicker();    final pickedFile = await picker.pickImage(source: ImageSource.camera);    if (pickedFile != null) {      File originalImage = File(pickedFile.path);         // new code      Position position = await Geolocator.getCurrentPosition(          desiredAccuracy: LocationAccuracy.high);      Uint8List? stampedBytes = await _addStampOnImageReturnBytes(          originalImage, position.latitude, position.longitude);      // if (stampedBytes != null) {      //   setState(() {      //     _stampedImageBytes = stampedBytes;      //     imageKey = UniqueKey();      //   });      // }      File? compressedImage = await compressImage(originalImage);      if (compressedImage != null) {        final base64String = base64Encode(await compressedImage.readAsBytes());        setState(() {          _stampedImageBytes = stampedBytes;          imageKey = UniqueKey();          switch (imageIndex) {            case 1:              _pickedImage = compressedImage;              _base64Image = base64String;              break;            case 2:              _secondPickedImage = compressedImage;              _secondBase64Image = base64String;              break;            case 3:              _thirdPickedImage = compressedImage;              _thirdBase64Image = base64String;              break;          }        });      }    }  }  // Future<void> _captureAndStampImage() async {  //   await Permission.camera.request();  //   await Permission.location.request();  //  //   final picker = ImagePicker();  //   final pickedFile = await picker.pickImage(source: ImageSource.camera);  //  //   if (pickedFile != null) {  //     File imageFile = File(pickedFile.path);  //  //     Position position = await Geolocator.getCurrentPosition(  //         desiredAccuracy: LocationAccuracy.high);  //  //     Uint8List? stampedBytes = await _addStampOnImageReturnBytes(  //         imageFile, position.latitude, position.longitude);  //  //     if (stampedBytes != null) {  //       setState(() {  //         _stampedImageBytes = stampedBytes;  //         imageKey = UniqueKey();  //       });  //     }  //   }  // }//Timestamp logic  // submit challana logic  void _submitForm() async {    final ipAddress = await challanViewModel        .getLocalIpAddress();    final challanRequest = ChallanRequest(      loginId: authViewModel.employeeDetailResponseState.value          .whenOrNull(success: (data) => (data as EmployeeDetailResponse?)          ?.employeeDetails?.loginId ?? "") ?? "",      offenceHolderTypeId: selectedOffender.wingId?.toString() ?? "",      offenceHolderName: offenceHolderNameController.text,      mobileNumber: mobileNumberController.text,      emailId: emailController.text,      tradeLicenseNumber: tradeLicenseController.text,      wingId: selectedWing.wingId?.toString() ?? "",      offenceId: selectedOffender.wingId?.toString() ?? "",      metrixId: selectedMetrix.metrixId?.toString() ?? "",      amount: (selectedMetrix.penaltyAmount ?? 0).toString(),      latitude: selectedLocation?['lat']?.toString() ?? "",      longitude: selectedLocation?['long']?.toString() ?? "",      address: selectedLocation?['address'] ?? "",      systemIP: ipAddress ?? "",      offenderAddress: offenderAddressController.text,      noofoffence: noofoffenceController.text.toString(),      offencephoto1: _secondBase64Image?.toString() ?? "",      offencephoto2: _secondBase64Image?.toString() ?? "",      vehicleno: vhnoController.text.toString(),      challanremarks: Vremarks.text.toString(),      paymentMode: 'Online',      offencePhoto: _base64Image?.toString() ?? "",    );    // if yes    if (flage=='1') {      final validationErrors = ChallanValidator().validateChallan(challanRequest);      if (validationErrors.isNotEmpty) {        Get.showSnackBar(          message: validationErrors.values.first,          backgroundColor: Colors.red,        );        setState(() {          errors = validationErrors;        });        return;      }      bool? confirmed = await showCustomDialog(          context, "Confirm", "Are You Sure You want to Create Challan?");      if (confirmed != true) return;      // Get.dialog(      //   const Center(child: CircularProgressIndicator()),      //   barrierDismissible: false,      // );      Get.dialog(        Dialog(          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),          child: Padding(            padding: const EdgeInsets.all(20.0),            child: Row(              mainAxisSize: MainAxisSize.min,              children: const [                CircularProgressIndicator(),                SizedBox(width: 20),                Text(                  "Loading...",                  style: TextStyle(fontSize: 16),                ),              ],            ),          ),        ),        barrierDismissible: false,      );      print("ChallanRequest JSON: ${challanRequest.toJson()}");      final isSubmitted =      await challanViewModel          .generateChallan(          challanRequest);      if (isSubmitted) {        Get.dialog(          ChallanDisplayDialog(            data: {              'Offender Type':              selectedOffender.wingName,              'Name':              offenceHolderNameController                  .text,              'Address': challanRequest                  .offenderAddress,              'Mobile Number':              challanRequest.mobileNumber,              'Email ID':              challanRequest.emailId,              'Violation':              selectedWing.proceedings,              'Penality Amount (Rs.)':              challanRequest.amount,              //              'Photo of Violation':              challanRequest.offencePhoto,              'Location Details of Violation':              'Lat: ${challanRequest.latitude}\nLong: ${challanRequest.longitude}\n\n${challanRequest.address}',            },            challanNumber: challanViewModel.challanResponseState.value                .whenOrNull(                success: (data) =>                (data as ChallanResponse?)                    ?.challanNumber ??                    "") ??                "",            closeTimes: 2,            successCloseTimes: 2,          ),        );        clearChallanForm();      }    }    // else no    else if(flage=='2') {      final validationErrors = ChallanValidatorsNo().validateChallan(challanRequest);      if (validationErrors.isNotEmpty) {        Get.showSnackBar(          message: validationErrors.values.first,          backgroundColor: Colors.red,        );        setState(() {          errors = validationErrors;        });        return;      }      bool? confirmed = await showCustomDialog(          context, "Confirm", "Are You Sure You want to Create Challan?");      if (confirmed != true) return;      print("ChallanRequest JSON: ${challanRequest.toJson()}");      // Get.dialog(      //   const Center(child: CircularProgressIndicator()),      //   barrierDismissible: false,      // );      Get.dialog(        Dialog(          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),          child: Padding(            padding: const EdgeInsets.all(20.0),            child: Row(              mainAxisSize: MainAxisSize.min,              children: const [                CircularProgressIndicator(),                SizedBox(width: 20),                Text(                  "Loading...",                  style: TextStyle(fontSize: 16),                ),              ],            ),          ),        ),        barrierDismissible: false,      );      final isSubmitted =      await challanViewModel.generateChallanTemp(challanRequest as ChallanRequest);      if (isSubmitted) {        Get.dialog(          NoChallanDisplayDialog(            data: {              'Offender Type': selectedOffender.wingName,              'Name': offenceHolderNameController.text,              'Address': challanRequest.offenderAddress,              'Mobile Number': challanRequest.mobileNumber,              'Email ID': challanRequest.emailId,              'Violation': selectedWing.proceedings,              'Penality Amount (Rs.)': challanRequest.amount,              'Photo of Violation': challanRequest.offencePhoto,              'Location Details of Violation':              'Lat: ${challanRequest.latitude}\nLong: ${challanRequest.longitude}\n\n${challanRequest.address}',            },            challanNumber: challanViewModel.challanResponseState.value                .whenOrNull(                success: (data) =>                (data as ChallanResponse?)?.challanNumber ?? "") ??                "",            closeTimes: 2,            successCloseTimes: 2,          ),        );        clearChallanForm();      }    }  }  @override  Widget build(BuildContext context) {    return Scaffold(        resizeToAvoidBottomInset: false,        appBar: AppBar(          backgroundColor: Colors.blueAccent,          title: const Text(            'Generate Challan',            style: TextStyle(                color: Colors.white, fontWeight: FontWeight.w600, fontSize: 16),          ),          leading: IconButton(            icon: const Icon(Icons.arrow_back, color: Colors.white),            onPressed: () {              Navigator.pop(context);            },          ),        ),        body: Obx(          () {            final wingList = (challanViewModel.wingsResponseState.value                        .whenOrNull(                            success: (data) => (data as WingsResponse?)))                    ?.wingsList                    ?.toList() ??                List.empty();            final componentList = (challanViewModel.componentResponseState.value                        .whenOrNull(                            success: (data) => (data as ComponentResponse?)))                    ?.componentList                    ?.toList() ??                List.empty();            final metrixList = (challanViewModel.metrixResponseState.value                        .whenOrNull(                            success: (data) => (data as MetrixResponse?)))                    ?.penalityList                    ?.toList() ??                List.empty();            return Stack(              children: [                Container(                  decoration: const BoxDecoration(                    image: DecorationImage(                      image: AssetImage('assets/images/ccms_bg.png'),                      fit: BoxFit.fill,                    ),                  ),                ),                // Form                Padding(                  padding: const EdgeInsets.all(16.0),                  child: Container(                    decoration: const BoxDecoration(                      color: Colors.white,                      borderRadius: BorderRadius.all(Radius.circular(12)),                    ),                    child: Padding(                      padding: const EdgeInsets.all(16.0),                      child: SingleChildScrollView(                        child: Form(                            key: _formKey,                            child: Column(                              crossAxisAlignment: CrossAxisAlignment.start,                              children: [                                Row(                                  children: [                                    Text('Offender Availability:'),                                    SizedBox(width: 0),                                    Row(                                      children: [                                        Radio<String>(                                          value: 'Yes',                                          groupValue: _value,                                          onChanged: (value) async {                                            setState(() {                                              flage='1';                                              _value = value;                                            });                                          },                                        ),                                        Text('Yes'),                                      ],                                    ),                                    Row(                                      children: [                                        Radio<String>(                                          value: 'No',                                          groupValue: _value,                                          onChanged: (value) async {                                            setState(() {                                              flage='2';                                              _value = value;                                            });                                          },                                        ),                                        Text('No'),                                      ],                                    ),                                  ],                                ),                                CustomDropDown(                                    label: 'Offender Type',                                    options: offenderList                                        .map((item) => item.wingName ?? "")                                        .toList(),                                    onChange: (value) {                                      setState(() {                                        selectedOffender =                                            offenderList.firstWhere((item) =>                                                item.wingName == value);                                      });                                      challanViewModel.fetchWingsMaster();                                    }),                                const SizedBox(height: 4),                                CustomDropDown(                                  key: Key("Wing${selectedOffender.wingId}"),                                  label: 'Wing',                                  options: wingList                                      .map((item) => item.wingName ?? "")                                      .toList(),                                  onChange: (value) => setState(() {                                    selectedComponent =                                    const ComponentListResponse();                                    selectedMetrix = const MetrixListResponse();                                    selectedWing = wingList.firstWhere(                                            (item) => item.wingName == value);                                    final loginId = authViewModel                                        .employeeDetailResponseState.value                                        .whenOrNull(                                        success: (data) =>                                        (data as EmployeeDetailResponse?)                                            ?.employeeDetails                                            ?.loginId ??                                            "") ??                                        "";                                    challanViewModel.fetchComponentMaster(                                        ComponentRequest(                                          //loginId: selectedWing.wingId ?.toString() ??'',                                            loginId: loginId,                                            wingId: selectedWing.wingId                                                ?.toString() ??                                                '',                                            offenderType: selectedOffender                                                .wingId                                                ?.toString() ??                                                ""));                                  }),                                ),                                const SizedBox(height: 4),                                // Text(                                //   selectedWing.proceedings ?? "",                                //   style: const TextStyle(                                //       color: Colors.blue,                                //       fontWeight: FontWeight.w500,                                //       fontSize: 14),                                // ),                                const SizedBox(height: 4),                                CustomDropDown(                                  key: Key("Component${selectedWing.wingId}"),                                  label: 'Component (Offence Type)',                                  options: componentList                                      .map((item) =>                                  item.componentDescription ?? "")                                      .toList(),                                  onChange: (value) => setState(() {                                    selectedMetrix = const MetrixListResponse();                                    selectedComponent =                                        componentList.firstWhere((item) =>                                        item.componentDescription == value);                                    challanViewModel                                        .fetchMetrixMaster(MetrixRequest(                                      wingId:                                      selectedWing.wingId?.toString() ?? "",                                      componentId: selectedComponent.componentid                                          ?.toString() ??                                          "",                                      mobilenumber:                                      selectedMetrix.metrixId?.toString() ??                                          "",                                      tradelicensenumber:                                      selectedMetrix.metrixId?.toString() ??                                          "",                                    ));                                  }),                                ),                                const SizedBox(height: 4),                                Text(                                  selectedComponent.proceddings ?? "",                                  style: const TextStyle(                                      color: Colors.blue,                                      fontWeight: FontWeight.w500,                                      fontSize: 14),                                ),                                const SizedBox(height: 4),                      Visibility(                      visible: (selectedOffender.wingName ?? '') == 'Establishment',                      child: CustomTextField(                        label: 'Trade License Number',                        controller: tradeLicenseController,                        error: errors['TradeLicenceNumber'],                        onChange: (value) async {                          if (value.length == 13 && !hasFetchedTradeLicense) {                            hasFetchedTradeLicense = true;                            final result = await challanViewModel.fetchTradeLicense(value);                            if (result != null) {                              offenceHolderNameController.text = result.namepro ?? '';                              offenderAddressController.text = result.tradehno ?? '';                              mobileNumberController.text = result.mno ?? '';                            }                          } else if (value.length < 13) {                            hasFetchedTradeLicense = false; // Reset flag so it can trigger again                          } else if (value.length > 13) {                            // Optional: truncate input or show a validation error                            tradeLicenseController.text = value.substring(0, 13);                            tradeLicenseController.selection = TextSelection.fromPosition(                              TextPosition(offset: tradeLicenseController.text.length),                            );                          }                        },                      ),                    ),                                // Visibility(                                //   visible: (selectedOffender.wingName ?? '') == 'Establishment',                                //   child:                                //                                //                                //   CustomTextField(                                //     label: 'Trade License Number',                                //     controller: tradeLicenseController,                                //     error: errors['TradeLicenceNumber'],                                //     onChange: (value) async {                                //       if (value.length >= 13) {                                //         final result = await challanViewModel                                //             .fetchTradeLicense(value);                                //         if (result != null) {                                //           offenceHolderNameController.text =                                //               result.namepro ?? '';                                //           offenderAddressController.text =                                //               result.tradehno ?? '';                                //           mobileNumberController.text =                                //               result.mno ?? '';                                //         }                                //       }                                //     },                                //   ),                                // ),                                const SizedBox(height: 4),                      Visibility(                                 // visible: selectedComponent.vehicalintegration == "Yes",                                  visible: (selectedOffender.wingName ?? '') == 'Individual',                                    child: Column(                                    crossAxisAlignment: CrossAxisAlignment.start,                                    children: [                                      CustomTextField(                                        controller: vhnoController,                                        keyboardType: TextInputType.text,                                        error: errors['Vehiclenumber'],                                        label: 'Enter Vehicle Number',                                          maxLength: 10,                                          onChange: (value) async {                                            if (value.length >= 9) {                                              final result =                                                  await challanViewModel                                                      .fetchVehicaldetails(                                                          value);                                              final data = result?.data;                                              if (data != null) {                                                offenceHolderNameController                                                        .text =                                                    data.ownername ?? '';                                                offenderAddressController.text =                                                    data.owneradress ?? '';                                                mobileNumberController.text =                                                    data.ownermobileno ?? '';                                                // Freeze the fields                                                isFieldsReadOnly.value =                                                    true; // Use an RxBool in GetX                                              } else {                                                offenceHolderNameController                                                    .clear();                                                offenderAddressController                                                    .clear();                                                mobileNumberController.clear();                                                isFieldsReadOnly.value = false;                                              }                                            } else if (value.isEmpty) {                                              // If vehicle number is cleared                                              offenceHolderNameController                                                  .clear();                                              offenderAddressController.clear();                                              mobileNumberController.clear();                                              isFieldsReadOnly.value =                                                  false; // Unfreeze                                            }                                          }),                                    ],                                  ),                                ),                                const SizedBox(height: 16),                                CustomTextField(                                    label: 'Mobile No.',                                    controller: mobileNumberController,                                    keyboardType: TextInputType.phone,                                    maxLength: 10,                                    error: errors['MobileNumber']),                                const SizedBox(height: 4),                                CustomDropDown(                                  key: Key("Metrix${selectedComponent.componentid}"),                                  label: 'Metrix',                                  value: selectedMetrix.metrix,                                  options: metrixList.map((item) => item.metrix ?? "").toList(),                                  onChange: (value) {                                    setState(() {                                      selectedMetrix = metrixList.firstWhere((item) => item.metrix == value);                                      //   final offenceCount = int.tryParse(noofoffenceController.text);                                      //   if (offenceCount != null && offenceCount > 0) {                                      //     calculatedPenaltyAmount = (selectedMetrix.penaltyAmount ?? 0) ;                                      //   } else {                                      //     calculatedPenaltyAmount = selectedMetrix.penaltyAmount ?? 0;                                      //   }                                      isAmountUpdatedByUser = true;                                      selectedMetrix = metrixList.firstWhere((item) => item.metrix == value);                                      _updatePenaltyAmount(); // Trigger update immediately                                    });                                  },                                ),                                const SizedBox(height: 6),                                Visibility(                                  visible: selectedMetrix.metrix == "Each banner/ cutout",                                  child: Text(                                    "Each banner/cutout Penalty Amount \nRs:5000 /-",                                    // " ${widget.challan.eachOffenceAmount} /-"                                    // "Penality Amount Rs ${selectedMetrix.penaltyAmount?.toString() ?? ""} /-",                                    style: const TextStyle(                                        color: Colors.orange,                                        fontWeight: FontWeight.w600),                                  ),                                ),                                const SizedBox(height: 6),                                if ((selectedWing.wingName == "Advertisement") && selectedMetrix.metrix != null && selectedMetrix.metrix!.isNotEmpty) ...[                                  Text(                                    "No of offence",                                    style: const TextStyle(                                      color: Colors.blue,                                      fontSize: 16,                                      fontWeight: FontWeight.w500,                                    ),                                  ),                                  const SizedBox(height: 10),                                  CustomTextField(                                    controller: noofoffenceController,                                    keyboardType: TextInputType.number,                                    maxLength: 2,                                    error: errors['No of offence '],                                    label: '',                                  ),                                ],                                Visibility(                                  visible: (selectedMetrix.penaltyAmount?.toString() ?? "").isNotEmpty,                                  child: Text(                                    "Penalty Amount Rs ${calculatedPenaltyAmount} /-",                                    style: const TextStyle(                                      color: Colors.red,                                      fontWeight: FontWeight.w600,                                    ),                                  ),                                ),                                const SizedBox(height: 16),                                //                                // CustomTextField(                                //   label: 'Name of Individual / Establishment',                                //   controller: offenceHolderNameController,                                //   error: errors['OffenceHolderName'],                                // ),                                // name                                Obx(() => CustomTextField(                                  controller: offenceHolderNameController,                                  label: 'Name of Individual / Establishment',                                  error: errors['OffenceHolderName'],                                  readOnly: isFieldsReadOnly.value,                                  maxLength: 15,                                )),                                const SizedBox(height: 16),                                // GestureDetector(onTap: ()=>challanViewModel.payChallan(),                                // child:const Text("CLICK ME")),                                CustomTextField(                                  label: 'Address (Offender)',                                  controller: offenderAddressController,                                  error: errors['OffenderAddress'],                                  maxLength: 100,                                ),                                const SizedBox(height: 16),                                CustomTextField(                                  label: 'Email ID (Optional)',                                  keyboardType: TextInputType.emailAddress,                                  controller: emailController,                                  error: errors['EmailID'],                                  maxLength: 30,                                ),                                const SizedBox(height: 16),                                Text(                                  "Remarks",                                  style: const TextStyle(                                    color: Colors.blue,                                    fontSize: 16,                                    fontWeight: FontWeight.w500,                                  ),                                ),                                const SizedBox(height: 0),                                CustomTextField(                                  controller: Vremarks,                                  keyboardType: TextInputType.text,                                  error: errors['Remarks'],                                  label: 'Enter Remarks',                                ),                                const SizedBox(height: 16),                                const Text(                                  'Capture Offence Photo',                                  style: TextStyle(                                      fontSize: 16,                                      fontWeight: FontWeight.bold),                                ),                                const SizedBox(height: 8),                                Row(                                  crossAxisAlignment: CrossAxisAlignment.start,                                  children: [                                    // First Image Picker                                    Expanded(                                      child: GestureDetector(                                        onTap: () => pickAndSetImage(1),                                        child: buildImagePickerContainer(_pickedImage),                                      ),                                    ),                                    if (_pickedImage != null) const SizedBox(width: 8),                                    // Second Image Picker                                    if (_pickedImage != null)                                      Expanded(                                        child: GestureDetector(                                          onTap: () => pickAndSetImage(2),                                          child: buildImagePickerContainer(_secondPickedImage),                                        ),                                      ),                                    if (_secondPickedImage != null) const SizedBox(width: 8),                                    // Third Image Picker                                    if (_secondPickedImage != null)                                      Expanded(                                        child: GestureDetector(                                          onTap: () => pickAndSetImage(3),                                          child: buildImagePickerContainer(_thirdPickedImage),                                        ),                                      ),                                  ],                                ),                                const SizedBox(height: 12),                                // Row(                                //   crossAxisAlignment: CrossAxisAlignment.start,                                //   children: [                                //     // First Image Picker                                //     Expanded(                                //       child: GestureDetector(                                //         onTap: () async {                                //           final image = await pickImage();                                //           if (image != null) {                                //             setState(() {                                //               _pickedImage = image;                                //               _base64Image = base64Encode(                                //                   image.readAsBytesSync());                                //             });                                //           }                                //         },                                //         child: Container(                                //           height: 130,                                //           width: double.infinity,                                //           decoration: BoxDecoration(                                //             border:                                //                 Border.all(color: Colors.grey),                                //             borderRadius:                                //                 BorderRadius.circular(8),                                //           ),                                //           child: _pickedImage != null                                //               ? ClipRRect(                                //                   borderRadius:                                //                       BorderRadius.circular(8),                                //                   child: Image.file(                                //                     _pickedImage!,                                //                     fit: BoxFit.cover,                                //                     width: double.infinity,                                //                     height: double.infinity,                                //                   ),                                //                 )                                //               : const Icon(Icons.camera_alt,                                //                   size: 50, color: Colors.grey),                                //         ),                                //       ),                                //     ),                                //                                //     if (_pickedImage != null)                                //       SizedBox(width: 8),                                //                                //     // Second Image Picker                                //     if (_pickedImage != null)                                //       Expanded(                                //         child: GestureDetector(                                //           onTap: () async {                                //             final image = await pickImage();                                //             if (image != null) {                                //               setState(() {                                //                 _secondPickedImage = image;                                //                 _secondBase64Image =                                //                     base64Encode(image                                //                         .readAsBytesSync());                                //               });                                //             }                                //           },                                //           child: Container(                                //             height: 130,                                //             width: double.infinity,                                //             decoration: BoxDecoration(                                //               border: Border.all(                                //                   color: Colors.grey),                                //               borderRadius:                                //                   BorderRadius.circular(8),                                //             ),                                //             child: _secondPickedImage != null                                //                 ? ClipRRect(                                //                     borderRadius:                                //                         BorderRadius.circular(                                //                             8),                                //                     child: Image.file(                                //                       _secondPickedImage!,                                //                       fit: BoxFit.cover,                                //                       width: double.infinity,                                //                       height: double.infinity,                                //                     ),                                //                   )                                //                 : const Icon(Icons.camera_alt,                                //                     size: 50,                                //                     color: Colors.grey),                                //           ),                                //         ),                                //       ),                                //                                //     if (_secondPickedImage != null)                                //       SizedBox(width: 8),                                //                                //     // Third Image Picker                                //     if (_secondPickedImage != null)                                //       Expanded(                                //         child: GestureDetector(                                //           onTap: () async {                                //             final image = await pickImage();                                //             if (image != null) {                                //               setState(() {                                //                 _thirdPickedImage = image;                                //                 _thirdBase64Image =                                //                     base64Encode(image                                //                         .readAsBytesSync());                                //               });                                //             }                                //           },                                //           child: Container(                                //             height: 130,                                //             width: double.infinity,                                //             decoration: BoxDecoration(                                //               border: Border.all(                                //                   color: Colors.grey),                                //               borderRadius:                                //                   BorderRadius.circular(8),                                //             ),                                //             child: _thirdPickedImage != null                                //                 ? ClipRRect(                                //                     borderRadius:                                //                         BorderRadius.circular(                                //                             8),                                //                     child: Image.file(                                //                       _thirdPickedImage!,                                //                       fit: BoxFit.cover,                                //                       width: double.infinity,                                //                       height: double.infinity,                                //                     ),                                //                   )                                //                 : const Icon(Icons.camera_alt,                                //                     size: 50,                                //                     color: Colors.grey),                                //           ),                                //         ),                                //       ),                                //   ],                                // ),                                const SizedBox(height: 12),                                if (_base64Image != null &&                                    selectedLocation != null)                                  Container(                                      decoration: BoxDecoration(                                          border: Border.all(                                              color: Colors.blueAccent,                                              width: 1)),                                      child: Column(                                        children: [                                          const SizedBox(height: 12),                                          Row(                                            mainAxisSize: MainAxisSize.max,                                            mainAxisAlignment:                                                MainAxisAlignment.spaceAround,                                            children: [                                              Text(                                                "Latitude\n${selectedLocation?['lat']}",                                                style: const TextStyle(                                                    color: Colors.black,                                                    fontWeight: FontWeight.w500,                                                    fontSize: 14),                                              ),                                              Text(                                                  "Longitude\n${selectedLocation?['long']}",                                                  style: const TextStyle(                                                      color: Colors.black,                                                      fontWeight:                                                          FontWeight.w500,                                                      fontSize: 14)),                                            ],                                          ),                                          const SizedBox(                                            height: 8,                                          ),                                          Container(                                            width: double.infinity,                                            height: 1,                                            color: Colors.blue,                                          ),                                          const SizedBox(                                            height: 8,                                          ),                                          Text(                                            "${selectedLocation?['address']}",                                            textAlign: TextAlign.center,                                            style: const TextStyle(                                                fontWeight: FontWeight.w600,                                                color: Colors.black87),                                          ),                                          const SizedBox(                                            height: 8,                                          ),                                        ],                                      )),                                const SizedBox(height: 32),                                Center(                                  child: SizedBox(                                    width: 180,                                    child: FilledButton(                                      onPressed: _submitForm,                                      style: FilledButton.styleFrom(                                        backgroundColor: Colors.blue,                                        shape: RoundedRectangleBorder(                                          borderRadius:                                              BorderRadius.circular(8),                                        ),                                        padding: const EdgeInsets.symmetric(                                            vertical:                                                8), // Adjust padding for height                                      ),                                      child: const SizedBox(                                          width: double.infinity,                                          child: Text(                                            'Submit',                                            textAlign: TextAlign.center,                                          )),                                    ),                                  ),                                ),                              ],                            )),                      ),                    ),                  ),                ),              ],            );          },        ));  }}Widget buildImagePickerContainer(File? imageFile) {  return Container(    height: 130,    decoration: BoxDecoration(      border: Border.all(color: Colors.grey),      borderRadius: BorderRadius.circular(8),    ),    child: imageFile != null        ? ClipRRect(      borderRadius: BorderRadius.circular(8),      child: Image.file(        imageFile,        fit: BoxFit.cover,        width: double.infinity,        height: double.infinity,      ),    )        : const Icon(Icons.camera_alt, size: 50, color: Colors.grey),  );}