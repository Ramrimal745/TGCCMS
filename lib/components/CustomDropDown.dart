import 'package:flutter/material.dart';class CustomDropDown extends StatefulWidget {  final String label;  final String? value;  final List<String> options;  final void Function(String)? onChange;  CustomDropDown({    super.key,    required this.label,    required this.options,    this.value,    this.onChange,  });  @override  _CustomDropDownState createState() => _CustomDropDownState();}class _CustomDropDownState extends State<CustomDropDown> {  String? selectedValue;  @override  void initState() {    super.initState();    // Only assign if the value is valid    final validOptions = {'--Select--', ...widget.options};    selectedValue = widget.value != null && validOptions.contains(widget.value)        ? widget.value        : '--Select--';  }  @override  void didUpdateWidget(covariant CustomDropDown oldWidget) {    super.didUpdateWidget(oldWidget);    final validOptions = {'--Select--', ...widget.options};    if (widget.value != oldWidget.value &&        widget.value != null &&        validOptions.contains(widget.value)) {      setState(() {        selectedValue = widget.value;      });    }  }  @override  Widget build(BuildContext context) {    final allOptions = {'--Select--', ...widget.options}.toList();    // Defensive check for safety    final dropdownValue =    allOptions.contains(selectedValue) ? selectedValue : null;    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Text(          widget.label,          style: const TextStyle(fontSize: 16, color: Colors.blue),        ),        const SizedBox(height: 8),        Container(          padding: const EdgeInsets.symmetric(horizontal: 12),          decoration: BoxDecoration(            border: Border.all(color: Colors.grey),            borderRadius: BorderRadius.circular(8),          ),          child: DropdownButton<String>(            isExpanded: true,            underline: const SizedBox(),            hint: const Text('--Select--'),            value: dropdownValue,            items: allOptions.map((String option) {              return DropdownMenuItem<String>(                value: option,                child: Text(                  option,                  style: const TextStyle(fontWeight: FontWeight.w500),                ),              );            }).toList(),            onChanged: (value) {              setState(() {                selectedValue = value;                if (value != '--Select--') {                  widget.onChange?.call(value ?? "");                }              });            },            dropdownColor: Colors.white,          ),        ),      ],    );  }}